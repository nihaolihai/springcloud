这是rabbitmq消费者模块，端口8901，
添加了eureka客户端
依赖
<dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- 图形化 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-stream-rabbit</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
    </dependencies>

配置
server:
  port: 8901

spring:
  application:
    name: cloud-consumer-rabbitmq
  cloud:
    stream:
      binders: #在此绑定rabbitmq的服务信息
        defaultRabbit: #表示定义的名称，相当于binder整合
          type: rabbit #消息组件类型
          environment: #设置rabbitmq的相关的环境配置
            spring:
              rabbitmq:
                host: localhost
                port: 5672
                username: guest
                password: guest
      bindings: #服务的整合处理
        input: #这个名字是一个通道的名称
          destination: studyExchange #表示要使用的exchange名称定义
          content-type: application/json #设置信息类型，本次为json,文本则设置“text/plain”
          binder: defaultRabbit #设置要绑定的信息服务的具体设置
          group: cosum8902

eureka:
  client:
    #true表示向注册中心注册自己
    register-with-eureka: true
    #是否从服务中心抓取已有的注册信息，默认true，单机无所谓，集群必须为true,才能配合ribbon使用负载均衡
    fetch-registry: true
    service-url:
      #设置eureka server交互的地址服务和注册服务都需要的依赖
      #单机配置：
      defaultZone: http://localhost:7001/eureka
      #集群设置
      #defaultZone: http://eureka7001.com:7001/eureka,http://eureka7001.com:7002/eureka
  instance:
    instance-id: consum-8801.com
    prefer-ip-address: true #显示主机IP显示
    #eureka客户端向服务端发送心跳的时间间隔，单位为妙(默认30s)
    lease-renewal-interval-in-seconds: 2
    #eureka服务端在收到最后一次心跳后等待时间上限，单位为妙(默认90s)，超时将剔除服务
    lease-expiration-duration-in-seconds: 5

测试
@Component
@EnableBinding(Sink.class)//定义消息的消费管道
public class ProviderMQController {

    @Value("${server.port}")
    private String serverport;

    @StreamListener(Sink.INPUT)
    public void receive(Message<String> message){
        System.out.println(message.getPayload());
    }
}