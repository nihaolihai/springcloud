这是订单hystrix模块，端口80，添加了eureka客户端及获取服务信息
启动类加
@EnableFeignClients//开启feign

service
@FeignClient(value = "CLOUD-PAYMENT-HYSTRIX")//负载均衡
@EnableHystrix//开启Hystrix

依赖
 <dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-openfeign</artifactId>
</dependency>
配置
feign:
  hystrix:
    enabled: true

//降级注解，加方法上，注意改value需要重启服务，自定义捕捉，若配置全局且加自定义捕捉，就会捕捉本身异常
    @HystrixCommand(fallbackMethod = "orderInfoErroHander",commandProperties = {
        @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds",value = "1500")
        })
    /**
         * 服务降级处理
         */
        public String orderInfoErroHander(Integer id){
            return "消费方超时，请稍后再试！";
        }
 全局捕捉
 controller类上加
@DefaultProperties(defaultFallback = "globalOrderInfoErroHander")

    /**
     * 全部超时捕捉
     * @param id
     * @return
     */
    @GetMapping(value = "/order/hystrix/globalpaymenterr/{id}")
    @HystrixCommand
    public String paymentInfoGlobalErro(@PathVariable("id")  Integer id){
        return paymentFeignService.paymentInfoErro(id);
    }

     /**
         * 全局服务降级处理
         */
        public String globalOrderInfoErroHander(){
            return "全局消费方超时，请稍后再试！";
        }

 宕机处理异常

 @Component
 @FeignClient(value = "CLOUD-PAYMENT-HYSTRIX",fallback = PaymentFallHystrixService.class)
 public interface PaymentHystrixService {

     @GetMapping(value = "/hystrix/paymentok/{id}")
     String paymentInfoOK(@PathVariable("id")  Integer id);

     @GetMapping(value = "/hystrix/paymenterr/{id}")
     String paymentInfoErro(@PathVariable("id")  Integer id);
 }

 /**
  * 同意捕捉异常超时，宕机
  */
 @Component
 public class PaymentFallHystrixService implements PaymentHystrixService {

     @Override
     public String paymentInfoOK(Integer id) {
         return "paymentInfoOK正常";
     }

     @Override
     public String paymentInfoErro(Integer id) {
         return "paymentInfoErro失败";
     }
 }
